pipeline {
    agent any
    tools {
        jdk "OracleJDK16"
        maven "MAVEN3"
    }

    environment {
                        REPO = '<repo-for-app>'
                        NEXUSIPADDRESS = '<Nexus-private-ip>'
                        NEXUSPORT = '<port>'
                        NEXUS_USERNAME = '<username>'
                        NEXUS_PASSWORD = '<password>'
                        NEXUS_LOGIN_ID = '<login ID in Jenkins>'
                        SONARSERVER = '<sonarserver details ID in Jenkins>'
                        SONARSCANNER = '<Plugin details ID in Jenkins>'
    }

    stages {
        stage('Build'){
            steps {
                sh 'mvn install'
            }
            post {
                success {
                    echo "Archiving the artifacts"
                    archiveArtifacts artifacts: '**/*.war'
                }
            }
        }

        stage('Test'){
            steps {
                sh 'mvn test'
            }

        }

        stage('Checkstyle Analysis'){
            steps {
                sh 'mvn checkstyle:checkstyle'
            }
        }


        stage('Source code Analysis with SonarQube') {
            environment {
                scannerHome = tool "${SONARSCANNER}"
            }
            steps {
               withSonarQubeEnv("${SONARSERVER}") {
                   sh '''${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=<app-name> \
                   -Dsonar.projectName=<project-name> \
                   -Dsonar.projectVersion=1.0 \
                   -Dsonar.sources=src/ \
                   -Dsonar.java.binaries=folder/testing1/morefolders/testing2/ \
                   -Dsonar.junit.reportsPath=folder/reports/ \
                   -Dsonar.jacoco.reportsPath=folder/jacoco.exec \
                   -Dsonar.java.checkstyle.reportPaths=folder/checkstyle-result.xml'''
              }
            }
        }

        stage("Quality Gate checks") {
                 steps {
                     timeout(time: 1, unit: 'HOURS') {
                         waitForQualityGate abortPipeline: true
                     }
                 }
         }


       stage("Uploading the Artifact into Nexus"){
            steps{
                nexusArtifactUploader(
                  nexusVersion: 'nexus3',
                  protocol: 'http',
                  nexusUrl: "${NEXUSIPADDRESS}:${NEXUSPORT}",
                  groupId: 'QA',
                  version: "${env.BUILD_ID}-${env.BUILD_TIMESTAMP}",
                  repository: "${REPO}",
                  credentialsId: "${NEXUS_LOGIN_ID}",
                  artifacts: [
                    [artifactId: '<app-ID>',
                     classifier: '',
                     file: 'folder/<app-name_version>.war',
                     type: 'war']
                  ]
                )
                  }
        }
  }
}
